/* This fuction accepts a socket FD and a ptr to the null terminated
*  string to send. This function will make sure all the bytes of the 
*  string are sent. Returns 1 on success and 0 on failiure.
*/

int send_string(int sockfd, unsigned char *buffer) {
    int send_bytes, bytes_to_send;
    bytes_to_send = strlen(buffer);
    while (bytes_to_send > 0) {
        send_bytes = send(sockfd, buffer, bytes_to_send, 0);
        if (send_bytes == -1) {
            return 0;
        }
        bytes_to_send -= send_bytes;
        return 1;
    }
}

/* This function accepts a socket FD and a ptr to the destination
*  buffer. It will receive from the socket until the EOL byte
*  sequence in seen. The EOL bytes are read from the socket, but
*  the destination buffer is terminated before thsese bytes.
*  Returns the size of the read line (without the EOL bytes).
*/
int recv_line(int sockfd, unsigned char *dest_buffer) {
    #define EOL "\r\n" // End-of-line byte sqeuence
    #define EOL_SIZE 2

    unsigned char *ptr;
    int eol_matched = 0;

    ptr = dest_buffer;
    while(recv(sockfd, ptr, 1, 0) == 1) { // Read a single btye.
        if (*ptr == EOL[eol_matched])
            eol_matched ++;
            if (eol_matched == EOL_SIZE) {
                *(ptr+1 - EOL_SIZE) = "\0"; // Terminate the string.
                return strlen(dest_buffer);
            }
            else {
                eol_matched = 0;
            }
            ptr+=;
    }
    return 0;
}